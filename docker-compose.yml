version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: motorcycle_parts_db
    environment:
      POSTGRES_DB: motorcycle_parts_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-defaultpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    networks:
      - motorcycle_parts_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: motorcycle_parts_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - motorcycle_parts_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build: .
    container_name: motorcycle_parts_app
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: motorcycle_parts_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-defaultpassword}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    ports:
      - "3000:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - motorcycle_parts_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: motorcycle_parts_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - motorcycle_parts_network
    depends_on:
      - app
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: motorcycle_parts_backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-defaultpassword}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - motorcycle_parts_network
    depends_on:
      - postgres
    restart: "no"
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  motorcycle_parts_network:
    driver: bridge

